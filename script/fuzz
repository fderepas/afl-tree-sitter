#!/bin/bash
#/ Usage: script/fuzz language
#/
#/ Fuzz a tree-sitter. Fuzzing runs in a screen session.
#/
#/     -p --parallel
#/         Run fuzzing in parallel.
#/
#/     -n
#/         Number of secondary fuzzing processes to run. Default = 1.
#/
#/ Examples:
#/  script/fuzz ruby
#/  script/fuzz javascript

set -e
[ $# -eq 0 ] && set -- --help

parallel=false
lang=javascript
n=1
while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)
      grep ^#/ <"$0" |cut -c4-
      exit
      ;;
    -p|--parallel)
      parallel=true
      shift
      ;;
    -n)
      n=$2
      shift 2
      ;;
    *)
      lang=$1
      shift
      ;;
  esac
done


if $parallel; then
  out_dir="afl_sync/$lang"
  mkdir -p "$out_dir"

  screen -AdmS "afl-$lang" -t tab0
  screen -S "afl-$lang" -X screen -t "afl-$lang-primary" afl-fuzz -M $lang-primary -i "afl_in/$lang" -o "$out_dir" -t 1000 -x dictionaries/$lang.dict ./afl-$lang @@
  for i in $(seq 1 $n); do
    screen -S "afl-$lang" -X screen -t "afl-$lang-secondary$i" afl-fuzz -S $lang-secondary$i -i "afl_in/$lang" -o "$out_dir" -t 1000 -x dictionaries/$lang.dict ./afl-$lang @@
  done
  screen -r
else
  out_dir="afl_out/$lang"
  mkdir -p "$out_dir"

  afl-fuzz -d -i "afl_in/$lang" -o "$out_dir" -t 1000 -x dictionaries/$lang.dict ./afl-$lang @@
fi
